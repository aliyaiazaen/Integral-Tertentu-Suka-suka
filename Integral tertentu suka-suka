{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOqLIWowlfHR1O7uigmEfmz"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":19,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":294},"id":"M_qAGpw_gWI6","executionInfo":{"status":"ok","timestamp":1668671863387,"user_tz":-420,"elapsed":987,"user":{"displayName":"Aliya Ihda A. Z","userId":"07337059471822555619"}},"outputId":"f7e86ec7-691d-4972-ca84-99d8373a9631"},"outputs":[{"output_type":"stream","name":"stdout","text":["Integral Value:\n","45.7433257339751\n","Integration Error:\n","5.078529345278759e-13\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["\n","# Import needed functions.\n","import numpy as np\n","from scipy import integrate\n","import matplotlib.pyplot as plotlib\n","\n","# Define parameters.\n","x_start = 0\n","x_stop = 13\n","x_steps_interval = 0.01\n","\n","# Define an array of data points.\n","x_values = np.arange(x_start, x_stop, x_steps_interval)\n","y_values = 4*(x_values)*np.exp(-2) \n","\n","# Plot the function curve.\n","plotlib.plot(x_values, y_values)\n","\n","# Define a lambda function for integration over x values.\n","integration_function = lambda x: 4*x*np.exp(-2) \n","\n","# Calculate the integral.\n","integral, error = integrate.quad(integration_function, x_start, x_stop)\n","\n","# Print the integration results.\n","print(\"Integral Value:\")\n","print(integral)\n","print(\"Integration Error:\")\n","print(error)\n","\n","# Display the plot.\n","plotlib.xlabel('x')\n","plotlib.ylabel('y')\n","plotlib.show()"]}]}